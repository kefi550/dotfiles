[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  
  " debug
  " let g:lsp_log_verbose = 1
  let g:lsp_log_file = expand('~/vim-lsp.log')
  let g:lsp_async_completion = 1
  
  " let g:lsp_preview_max_height = 1
  " let g:lsp_preview_max_width = 1
  " let g:lsp_signature_help_enabled = 0
  
  let g:lsp_text_edit_enabled = 1
  
  " " python
  " if executable('/home/kefi/.local/share/vim-lsp-settings/servers/pyls/pyls-all')
  "   augroup LspPython
  "     au!
  "     au User lsp_setup call lsp#register_server({
  "       \ 'name': 'pyls',
  "       \ 'cmd': {server_info->['/home/kefi/.local/share/vim-lsp-settings/servers/pyls/pyls-all']},
  "       \ 'whitelist': ['python'],
  "       \ })
  "   augroup end
  " endif
  
  " autocmd FileType python setlocal omnifunc=lsp#complete
  
  function SetLSPShortcuts()
    nnoremap <leader>ld :<C-u>LspDefinition<CR>
  endfunction()
  
  augroup LSP
    autocmd!
    autocmd FileType python call SetLSPShortcuts()
  augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
#on_event=['InsertEnter']
#on_ft = ['sh', 'autohotkey', 'autoit', 'cfg', 'git', 'go', 'groovy', 'java', 'javascript', 'python', 'snippet', 'toml', 'vim', 'vb', 'xsl']
hook_add = '''
  let g:asyncomplete_log_file = expand('~/asyncomplete.log')
  let g:lsp_highlight_references_enabled = 1
  let g:lsp_highlights_enabled = 1
  let g:lsp_diagnostics_enabled = 1
  let g:lsp_async_completion = 1
  let g:lsp_auto_enable = 1
  let g:lsp_preview_autoclose = 0
  let g:lsp_preview_keep_focus = 0
  let g:lsp_preview_doubletap = 0
  let g:lsp_insert_text_enabled = 0
  let g:lsp_text_edit_enabled = 0
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_virtual_text_enabled = 0
  let g:lsp_textprop_enabled = 0
  let g:lsp_signature_help_enabled = 0
  let g:lsp_fold_enabled = 0
  let g:asyncomplete_auto_popup = 1
  let g:asyncomplete_popup_delay = 0
  let g:asyncomplete_auto_completeopt = 1
  let g:asyncomplete_remove_duplicates = 1
  let g:asyncomplete_smart_completion = 1
  set completeopt-=preview
  " let g:asyncomplete_enable_for_all = 0
  " autocmd vimrc FileType autohotkey,autoit,cfg,git,go,groovy,java,javascript,python,snippet,toml,vim,vb,xsl call asyncomplete#enable_for_buffer()"
  imap <expr><CR> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-y>" : "\<CR>"
  imap <expr><CR> neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" : pumvisible() ? "\<C-y>" : "\<CR>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
on_ft = ['python', 'go']
depends = ['asyncomplete.vim', 'vim-lsp']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
on_ft = ['autohotkey', 'autoit', 'cfg', 'git', 'go', 'groovy', 'java', 'javascript', 'python', 'snippet', 'toml', 'vim', 'vb', 'xsl']
hook_source = '''
  call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'priority': 5,
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
  \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
depends = ['asyncomplete.vim']
hook_source = '''
  call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
'''


[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['neosnippet.vim']
hook_source = '''
  function! Ns_completor(opt, ctx) abort
    let l:snips = values(neosnippet#helpers#get_completion_snippets())

    let l:matches = []

    let l:col = a:ctx['col']
    let l:typed = a:ctx['typed']

    let l:kw = matchstr(l:typed, '\w\+$')
    let l:kwlen = len(l:kw)

    " let l:matches = map(l:snips,'{"word":v:val["word"],"dup":1,"icase":1,"menu": "[snip] " . v:val["menu_abbr"]}')
    let l:matches = map(l:snips,'{"word":v:val["word"],"dup":1,"icase":1,"kind":"snip","menu": v:val["menu_abbr"]}')
    let l:startcol = l:col - l:kwlen

    " .のとき無視
    " if l:kw == ""
    "   let g:snips = l:snips
    " else
    "   call asyncomplete#complete(a:opt['name'], a:ctx, l:startcol, l:matches)
    " endif
    call asyncomplete#complete(a:opt['name'], a:ctx, l:startcol, l:matches)
  endfunction

  function! Asyncomplete_neosnippet_register_source() abort
    call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
      \ 'name': 'neosnippet',
      \ 'whitelist': ['*'],
      \ 'priority': 20,
      \ 'completor': function('Ns_completor'),
      \ }))
  endfunction

  function! Asyncomplete_neosnippet_unregister_source() abort
    call asyncomplete#unregister_source('neosnippet')
  endfunction

  function! Asyncomplete_toggle_neosnippet() abort
    if match (asyncomplete#get_source_names(), "neosnippet") != -1
      call Asyncomplete_neosnippet_unregister_source()
    else
      call Asyncomplete_neosnippet_register_source()
    endif
  endfunction

  imap <C-l> <C-o>:call Asyncomplete_toggle_neosnippet()<CR>
'''
#\ 'completor': function('asyncomplete#sources#neosnippet#completor'),

[[plugins]]
repo = 'Shougo/neosnippet-snippets'     

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = 'neosnippet-snippets'
hook_source = '''
  " <TAB>: completion.
  " inoremap <expr> <S-TAB> pumvisible() ? '<C-p>' : '<S-TAB>'

  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  nmap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " imap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '<C-n>' : '<TAB>'
  " smap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<TAB>'

  let g:neosnippet#data_directory = expand('~/_vim/.neosnippet')

  " Tell Neosnippet about the other snippets
  " gosnippets は vim-go がうまいことやってくれるはずだけど、なんかうまくいかないので直接追加。
  let g:neosnippet#snippets_directory = [
      \   '~/vimfiles/snippets',
      \   '~/_vim/dein/repos/github.com/honza/vim-snippets/snippets/',
      \   '~/_vim/dein/repos/github.com/fatih/vim-go/gosnippets/snippets/',
      \ ]
'''

#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#hook_add = '''
#  source ~/.config/nvim/plugins/deoplete.vim
#  let g:deoplete#enable_at_startup = 1
#  let g:deoplete#auto_completion_start_length = 1
#'''
#
#[[plugins]]
#repo = 'roxma/nvim-yarp'
#
#[[plugins]]
#repo = 'Shougo/deoplete-vim-lsp'


[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add= '''
  let g:echodoc#enable_at_startup=1
  let g:echodoc#type = 'signature'
'''

##############################################
# コード補完
#[[plugins]]
#repo = 'davidhalter/jedi-vim'
#on_ft = ['python']

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# rev = 'next'
# build = 'bash install.sh'
# hook_add = '''
#  " let g:LanguageClient_loggingLevel='DEBUG'
#  let g:LanguageClient_autoStart = 1
#  let g:LanguageClient_loggingFile =  expand('~/.local/share/nvim/LanguageClient.log') 
#
#  function SetLSPShortcuts()
#    nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
#    nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
#    nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
#    nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
#    nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
#    nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
#    nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
#    nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
#    nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
#    nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
#  endfunction()
#  
#  augroup LSP
#    autocmd!
#    " autocmd FileType cpp,c call SetLSPShortcuts()
#    autocmd FileType python call SetLSPShortcuts()
#  augroup END
#
#  let g:LanguageClient_serverCommands = {
#        \ 'python': ['pyls'],
#        \ 'go': ['gopls'],
#  \ }
#  ""      \ 'go': ['go-langserver', '-gocodecompletion'],
#  "      \ 'go': ['gopls','-format-tool','gofmt','-lint-tool','golint'],
#
#'

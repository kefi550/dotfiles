[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_update = '''
  let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
'''

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_event=['InsertEnter']
hook_add = '''
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_popup_delay = 0
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['vim-lsp']
on_source = ['asyncomplete.vim']

#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
#hook_add = '''
#  source ~/.config/nvim/plugins/deoplete.vim
#  let g:deoplete#enable_at_startup = 1
#  let g:deoplete#auto_completion_start_length = 1
#'''
#
##[[plugins]]
##repo = 'roxma/nvim-yarp'
##
##[[plugins]]
##repo = 'roxma/vim-hug-neovim-rpc'
#
#[[plugins]]
#repo = 'Shougo/deoplete-vim-lsp'

#[[plugins]]
#repo = 'mattn/vim-lsp-settings'
#
#[[plugins]]
#repo = 'mattn/vim-lsp-icons'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add='''
" lint 
let g:lsp_diagnostics_enabled = 1
let g:lsp_signature_help_enabled = 0
" debug
let g:lsp_log_verbose = 3
let g:lsp_log_file = expand('~/vim-lsp.log')
" let g:lsp_async_completion = 1

" go
if executable('go-langserver')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'go-langserver',
    \ 'cmd': {server_info->['go-langserver', '-mode', 'stdio']},
    \ 'whitelist': ['go'],
    \ })
endif

" python
let s:pyls_path = expand('~/.pyenv/versions/neovim-3/bin/pyls')
" if (executable('pyls'))
if (executable(expand(s:pyls_path)))
  au User lsp_setup call lsp#register_server({
  \ 'name': 'pyls',
  \ 'cmd': {server_info->[expand(s:pyls_path)]},
  \ 'whitelist': ['python']
  \ })
endif
"  \ 'name': 'pyls_neovim',

autocmd FileType python setlocal omnifunc=lsp#complete

" augroup PylsCommands
"   autocmd!
"   autocmd BufWinEnter *.py :call lsp#enable()
"   " local key mapping
"   autocmd FileType python nnoremap <C-]> :<C-u>LspDefinition<CR>
"   autocmd FileType python nnoremap K :<C-u>LspHover<CR>
"   autocmd FileType python nnoremap <LocalLeader>R :<C-u>LspRename<CR>
"   autocmd FileType python nnoremap <LocalLeader>n :<C-u>LspReferences<CR>
" augroup END

function SetLSPShortcuts()
  nnoremap <leader>ld :<C-u>LspDefinition<CR>
endfunction()

augroup LSP
  autocmd!
  autocmd FileType python call SetLSPShortcuts()
augroup END
'''

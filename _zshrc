export ZPLUG_HOME=~/.zplug
autoload -U compinit
compinit -u
autoload -Uz colors
colors

source $ZPLUG_HOME/init.zsh
zplug 'zplug/zplug', hook-build:'zplug --self-manage'
zplug "mafredri/zsh-async"

## history関係
#zplug "zsh-users/zsh-history-substring-search"

# テーマ
#zplug "yous/lime"

# 構文のハイライト(https://github.com/zsh-users/zsh-syntax-highlighting)
zplug "zsh-users/zsh-syntax-highlighting"
## タイプ補完
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-completions"

zplug "chrissicool/zsh-256color"
zplug "b4b4r07/enhancd"

zplug "superbrothers/zsh-kubectl-prompt"
source $ZPLUG_HOME/repos/superbrothers/zsh-kubectl-prompt/kubectl.zsh

#zplug "sindresorhus/pure"

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
    echo; zplug install
  fi
fi
## Then, source plugins and add commands to $PATH
zplug load

###############################################################################
# prompt
###############################################################################

autoload -Uz promptinit
promptinit
#prompt adam1
autoload -Uz vcs_info
precmd() {
  vcs_info
}
setopt prompt_subst
zstyle ':vcs_info:*' formats '%F{green}(%s)-[%b]%f'
zstyle ':vcs_info:*' actionformats '%F{red}(%s)-[%b|%a]%f'

VIMODE='[INSERT]'
function zle-keymap-select {
  VIMODE="${${KEYMAP/vicmd/[NORMAL]}/(main|viins)/[INSERT]}"
  zle reset-prompt
}
zle -N zle-keymap-select
bindkey -M viins 'jj' vi-cmd-mode

KUBE_COLOR="red"
case ${ZSH_KUBECTL_PROMPT} in
  poc*) KUBE_COLOR="cyan" ;;
  stg*) KUBE_COLOR="green" ;;
  *nightly*) KUBE_COLOR="yellow" ;;
  *prd*) KUBE_COLOR="red" ;;
esac
KUBE_PROMPT="%{$fg[${KUBE_COLOR}]%}($ZSH_KUBECTL_PROMPT)%{$reset_color%}"
if [ -z "$ZSH_KUBECTL_PROMPT" ]; then; KUBE_PROMPT=""; fi

PROMPT='${VIMODE} %D{%Y/%m/%d %H:%M:%S} %{$fg[magenta]%}(%~)%{$reset_color%} ${vcs_info_msg_0_} ${KUBE_PROMPT}
%{$fg[cyan]%}%n@%m%{$reset_color%} %# '

# コマンド実行時に時刻を更新する
re-prompt() {
    zle .reset-prompt
    zle .accept-line
}

zle -N accept-line re-prompt

###############################################################################

setopt histignorealldups sharehistory
# Avoid background processes to not bother Windows
unsetopt BG_NICE

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -v

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000

# コマンド実行時に時刻を更新する
re-prompt() {
    zle .reset-prompt
    zle .accept-line
}

zle -N accept-line re-prompt

###############################################################################

setopt histignorealldups sharehistory
# Avoid background processes to not bother Windows
unsetopt BG_NICE

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -v

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
if whence dircolors >/dev/null; then
  eval "$(dircolors -b)"
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
  alias ls='ls --color'
else
  export CLICOLOR=1
  zstyle ':completion:*:default' list-colors ''
fi
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

setopt print_eight_bit
setopt nolistbeep
setopt no_beep

# vagrant
export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"


## golang
# export GOPATH=$HOME/go
# export PATH=$PATH:/usr/lib/go-1.10/bin
# export PATH=$PATH:$GOPATH/bin

## pyenv
PYENV_ROOT="$HOME/.pyenv"
PATH="$PYENV_ROOT/shims:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi
#eval "$(pyenv virtualenv-init -)"

export XDG_CONFIG_HOME=~/.config
export XDG_CACHE_HOME=~/.cache

## alias
alias vim="/usr/bin/nvim"
alias ovim="/usr/bin/vim"
